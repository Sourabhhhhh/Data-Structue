//implementation of queue using stack
//time complexity of enQueue : O(1)
//time complexity of deQueue : O(n)
//space cpmplexity : O(n)
import java.util.Stack;

public class queueusingstack {
    static Stack<Integer> stack1 = new Stack<>();
    static Stack<Integer> stack2 = new Stack<>();

    //insertion of the data in the queueusingstack
    //time complexity : O(n)

    static void enQueue(int data) {
        stack1.push(data);
    }

    //deletion of the data from the queue - FIFO
    static int deQueue() {
        int ele;
        if (stack1.empty() && stack2.empty()) {
            System.out.println("queue is empty");
            System.exit(0);
        }

        //push all the elements from stack1 to stack2
        //time complexity : O(n)
        if (stack2.empty()) {
            while (!stack1.empty()) {
                ele = stack1.pop();
                stack2.push(ele);
            }
        }
        //pop the top element from the stack2
        //FIFO
        ele = stack2.pop();
        return ele;
    }


    public static void main(String[] args) {
        queueusingstack q = new queueusingstack();

        q.enQueue(2);
        q.enQueue(3);
        q.enQueue(4);
        q.enQueue(5);
        q.enQueue(6);

        //function calling for
        System.out.println("deleted element is"+q.deQueue());
        System.out.println("deleted element is"+q.deQueue());

    }

}
